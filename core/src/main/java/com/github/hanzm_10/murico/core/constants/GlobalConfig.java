package com.github.hanzm_10.murico.core.constants;

import java.io.FileOutputStream;
import java.util.Properties;
import java.util.logging.Logger;
import com.github.hanzm_10.murico.io.MuricoConfiguration;
import com.github.hanzm_10.murico.utils.LogUtils;

/**
 * GlobalConfig.java
 *
 * <p>
 * This class contains global configuration constants for the Murico application.
 */
public class GlobalConfig extends Properties {
    /** */
    private static final long serialVersionUID = 6360603438810759226L;

    private static final Logger LOGGER = LogUtils.getLogger(GlobalConfig.class);
    private static GlobalConfig instance;
    public static final String KEY_SESSION_UID = "db.sessions._session_uid";

    public static synchronized GlobalConfig getInstance() {
        if (instance == null) {
            instance = new GlobalConfig();
        }

        return instance;
    }

    private GlobalConfig() {
        MuricoConfiguration.loadGlobalConfig(instance);
    }

    /**
     * Bulk removes properties from the global configuration. Saves the updated properties to the
     * global configuration file.
     *
     * @param keys The keys of the properties to remove.
     * @return An array of previous values for the removed properties. The order of the values in
     *         the array corresponds to the order of the keys in the input array.
     */
    public synchronized Object[] bulkRemove(Object[] keys) {
        LOGGER.info("Removing properties: " + keys);
        var prevVals = new Object[keys.length];

        for (var i = 0; i < keys.length; i++) {
            prevVals[i] = super.remove(keys[i]);
            LOGGER.info("Removed property: " + keys[i] + " = " + prevVals[i]);
        }

        try (var outputStream = new FileOutputStream(MuricoConfiguration.GLOBAL_CONFIG_FILE_PATH)) {
            store(outputStream,
                    "THIS IS A GLOBAL CONFIGURATION FILE. DO NOT EDIT THIS FILE MANUALLY.");
            LOGGER.info("Global configuration updated successfully.");
        } catch (Exception e) {
            LOGGER.severe("Failed to save properties: " + e.getMessage());
        }

        return prevVals;
    }

    /**
     * Removes a property from the global configuration. Saves the updated properties to the global
     * configuration file.
     *
     * <p>
     * If performing multiple operations, consider using {@link #bulkRemove(Object[])} to reduce
     * file I/O operations.
     */
    @Override
    public synchronized Object remove(Object key) {
        LOGGER.info("Removing property: " + key);
        var prevVal = super.remove(key);

        if (prevVal != null) {
            try (var outputStream =
                    new FileOutputStream(MuricoConfiguration.GLOBAL_CONFIG_FILE_PATH)) {
                store(outputStream,
                        "THIS IS A GLOBAL CONFIGURATION FILE. DO NOT EDIT THIS FILE MANUALLY.");
            } catch (Exception e) {
                LOGGER.severe("Failed to save property: " + e.getMessage());
            }
        }

        return prevVal;
    }

    @Override
    public synchronized Object setProperty(String key, String value) {
        LOGGER.info("Setting property: " + key + " = " + value);
        var prevVal = super.setProperty(key, value);

        try (var outputStream = new FileOutputStream(MuricoConfiguration.GLOBAL_CONFIG_FILE_PATH)) {
            store(outputStream,
                    "THIS IS A GLOBAL CONFIGURATION FILE. DO NOT EDIT THIS FILE MANUALLY.");
        } catch (Exception e) {
            LOGGER.severe("Failed to save property: " + e.getMessage());
        }

        return prevVal;
    }
}
